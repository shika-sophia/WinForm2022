
◆Getting Started
http://kaitei.net/csforms/getting-started/#item-01

Windows フォームについて
開発環境
実行環境
他の選択肢
ビルドの方法

Windows フォームについて
C# で Windows 用の GUI アプリケーションを開発する手法として，次の 2 つの選択肢があります。

Windows フォーム
Windows Presentation Foundation (WPF)
Windows フォームの開発画面
Windows フォーム の開発画面	WPF の開発画面
WPF の開発画面
Windows フォームでは，純粋に C# のコードだけでウィンドウを作ることができます。
フォーム (form) というのはウィンドウのことです。
基本的には Windows API をラッピングしたものであり，従来からのデスクトップアプリケーションの開発に使われます。

WPF は .NET 3.0 から導入された比較的新しい技術です。
C# のコードと，XAML という XML 言語で書いたコードとを組み合わせて，ウィンドウを作ります。
WPF を習得すると Silverlight (WPF/E) アプリケーションも書けるようになります。


 
このシリーズで開発していくのは「Windows フォーム」によるプログラムです。
C# の基礎文法を修得した方にとっては，これが一番とっつきやすいと思います。
WPF や MFC と似ているところもあるので，将来的にこれらをやってみたいという方にとっても，Windows フォームはいい選択肢だと思います。

開発環境
Windows フォームアプリケーションを開発するには，IDE として Microsoft Visual Studio を利用するのが一般的です。
このチュートリアルでも，Microsoft Visual Studio の利用を前提として説明している箇所があります。

Microsoft Visual Studio の比較的新しいバージョンを用意してください。
エディションは Express Edition でも Professional Edition でも構いません。

Microsoft Visual Studio Express
http://www.microsoft.com/japan/msdn/vstudio/express/
このチュートリアルでは Visual C# 2010 Expreess を使用しています。

実行環境
Windows フォームアプリケーションを実行するには，コンピュータに .NET Framework がインストールされている必要があります。
Visual Studio をインストールすれば自動的にインストールさますが，そうでない場合は次のページからダウンロードしてください。

.NET Framework ダウンロード
http://msdn.microsoft.com/ja-jp/netframework/aaa569263
他の選択肢
Windows アプリケーションを作成する方法は，.NET の Windows フォームや WPF を使う方法だけではありません。
例えば，Windows API，MFC，Visual Basic，Delphi などの選択肢をとることもできます。
学習コストや開発するアプリケーションの性質に照らして，適切な方法を検討することが重要です。

Windows API: Windows が提供する API を直接使用する方法です。開発言語には C を使用します。簡単なアプリケーションの作成でも複雑な API をこねくり回す必要があるため，学習コストと開発コストが高めです。ネイティブの API を直接使用するため，Windows の細かい制御を行うアプリケーションの開発に適しています。
MFC: Windows API を Visual C++ のクラスでカプセル化したライブラリを使用する方法です。
Visual Basic: BASIC ベースの言語である Visual Basic を使用する方法です。VB 6.0 の後に大幅な言語仕様の変更があり，現在は VB.NET が広く使われています。
Delphi: Borland が提供する開発環境を使用する方法で，開発言語には Object Pascal を使用します。ネイティブコードを生成することから，性能を気にするケースでも使用できます。
ビルドの方法
このページの説明には Visual C# 2010 Express を使用していますが，他のバージョンやエディションでも似たような操作で同じことができると思います。

プロジェクトの新規作成
[ファイル] - [新しいプロジェクト] を選択します。
プロジェクトの新規作成-1
[Windows フォームアプリケーション] を選択し，プロジェクト名を入力します。
ここでは，プロジェクト名を「Project1」に統一して説明します。

プロジェクトの新規作成-2
[ソリューションエクスプローラ] が表示されていない場合は，[表示] - [その他のウィンドウ] - [ソリューションエクスプローラ] から表示させます。

プロジェクトの新規作成-3
ここではデザイナを利用した開発は行わないので，ファイル「Form1.cs」は 右クリック - [削除] で消してしまいます。

プロジェクトの新規作成-4
残った「Program.cs」のアイコンをダブルクリックすると，Program.cs の編集ウィンドウが開きます。
ソースコードはすべてこのファイルに書いていきます。
予め入力されているソースコードは，消してしまって構いません。

プロジェクトの新規作成-5
C# のソースファイルは，拡張子が .cs のテキストファイルです。これは Visual Studio 以外の環境でも基本的に同じです。

ビルドと実行
Program.cs の中に，次のソースコードを打ち込んでみてください (大文字と小文字は区別されます)。
このプログラムをビルド (コンパイル) して，実行してみます。

using System;
using System.Windows.Forms;

class Program
{
    [STAThread]
    static void Main()
    {
        Form form = new Form();
        form.Text = "Hello";
        Application.Run(form);
    }
}
プログラムのビルド (コンパイル) は，[ビルド] - [ソリューションのビルド] から行います (*)。
ビルドと実行-1""
プログラムの実行は，[デバッグ] - [デバッグ開始] または [デバッグなしで開始] から行います (*)。
ビルドと実行-2
(*) [ビルド] メニューや [デバッグなしで開始] という項目が存在しない場合は，[ツール] - [設定] で [上級者設定] を選択してください。

図のようなウィンドウが表示されれば成功です。
こうしたウィンドウのことを，Windows フォーム開発では「フォーム」と呼びます。
ビルドと実行-3
プロジェクトのプロパティ
プロジェクトを開いた状態で [プロジェクト] - [Project1 のプロパティ] を開くと，プロジェクトのプロパティを編集できます。

[アプリケーション] タブの [出力の種類] では，プログラムの形式を以下の 3 つから選択できます。
Windows フォームアプリケーションは [Windows アプリケーション] ですが，デバッグ時にコンソールを使用すると便利なこともあります。

出力の種類	説明
Windows アプリケーション	プログラムを GUI アプリケーション (ウィンドウを表示するアプリケーション) としてビルドします。
コンソールアプリケーション	プログラムをコンソールアプリケーション (コマンドプロンプト上で動くアプリケーション) としてビルドします。
クラスライブラリ	実行可能形式でないプログラムとしてビルドします。
スポンサーリンク

 
目次 次のページ »
サイト概要 | お問合せ | プライバシーポリシー
© 2018 kaitei.net
