■ densanlabs
4. データの挿入、読み出し、更新、削除
https://densan-labs.net/tech/codefirst/adddelete.html

Table Of Contents
4. データの挿入、読み出し、更新、削除
4.1. DbContextとエンティティの状態
4.2. データの挿入
4.3. データの読み出し
4.3.1. キャッシュされたデータにアクセスする
4.3.2. LINQによるデータアクセス
4.3.3. LINQ To EntitiesとLINQ To Object
4.3.4. 大量データ読み出し時の注意
4.3.5. Findを使ったデータの検索
4.4. データの更新
4.5. データの削除
4.6. SaveChangesの動作


4.1. DbContextとエンティティの状態
Entity Framework(EF)では，DBへのデータの挿入，読み出し，更新，削除といった
基本的な操作はDbContextを通じて行います．
Contextという名前から分かるように，
DbContextは内部に挿入や更新を行うオブジェクトの状態を保持しています．

例えばデータをDBに挿入する場合，EFでは以下のように記述します．

public class Product
{
    public int ProductId { get; set; }
    public string Name { get; set; }
    public int Price { get; set; }
}

public class ShoppingContext : DbContext
{
    public DbSet<Product> Products { get; set; }
}

static void Main(string[] args)
{
    using (var context = new ShoppingContext())
    {
        // Addした段階では Sql 文は DB に発行されない
        context.Products.Add(newProduct
        {
            Name = "Test",
            Price = 1000,
        });

        // SaveChanges() が呼び出された段階で初めて Insert文が発行される
        context.SaveChanges();
    }
}

上記の例の場合，データをAdd() した段階で即座にDBに状態が反映されるわけではなく，
SaveChanges() を呼び出した段階で初めてデータが更新されます．

DbContext 内部では，変更を加える前のオブジェクトの状態，
及び変更を加えた後のオブジェクトの状態 を保持しています．
データ挿入の場合は，Add() を呼び出した段階で，
新規オブジェクトを Added 状態として DbContext 内に挿入します．
その後，SaveChanges() を呼び出すことで，DBにSQLが発行され，
オブジェクトが Added 状態から Unchanged 状態に変化します． 
DbContext内のオブジェクトは，Contextを破棄するまで残りつづけます．

using(var context = new ShoppingContext())
{
   context.Products.Add(new Product(...))  // この時点で Contextに新しいオブジェクトが追加され Added 状態になる
   context.SaveChanges();                  // この時点で Contextに保存されているデータがDBに反映される
}

Contextは内部状態を持っているため，
不必要になったら必ずDisposeしなければならないことに注意してください．


＊更新の場合の例も見てみましょう，

using (var context = new ShoppingContext())
{
   // Single は即座に DB に Selectコマンドを発行する
   // context には Unchanged な状態のオブジェクトが入る
   var product = context.Products.Single(x => x.Name == "Test");

   // 取得したオブジェクトに変更を加える
   // contextには Modified な状態のオブジェクトが入る
   product.Name = "別のものに書き換える"

   // ここで初めて Update 文が発行される
   context.SaveChanges();
}

LINQの Single() はデータが1件かどうかを即座に判断しなければならないため，
すぐに DBへコマンドが発行されます．
データ取得後は，context内部に Unchanged 状態でオブジェクトが挿入されます．
その後，取得したオブジェクトを書き換えると，
context内部では Modified 状態として記憶されます． 
最後に SaveChanges() が呼び出されると，DBへ Update 文が発行され，
オブジェクトは Unchanged 状態に変化します．

エンティティの状態には，
Unchanged, Added, Deleted, Detached, Modified という5つの状態が存在します．
それぞれの状態の意味は以下の通りです．

Unchanged 状態
  DBにデータが存在していて，全く更新が加えられてないときの状態です． 
  DBのデータが Contextにアタッチされた（読み出された）直後や，
  SaveChanges直後は Unchanged 状態になります．

Added 状態
Contextに Entityがトラッキングされた状態で，
かつDBにデータが存在しない場合は Added 状態になります．
SaveChanges() を呼び出すと，DBには Added 状態のEntityの INSERT文が発行されます．
SaveChanegs() を呼び出した後は Unchanged 状態になります．

Deleted 状態
DBにデータが存在していて，これから削除しようとしている場合は Deleted 状態となります．
SaveChanges() を呼び出すと，DELETE文がDBに対して発行されます．
その後，Entityは Detached 状態になります．

Detached 状態
Detached 状態は，オブジェクトは存在しているけれど，
DbContextによって状態がトラッキングされていない状態です．

Modified状態
Modified はオブジェクトのプロパティの一部が変更されていて，
まだ SaveChanges() が呼び出されていない状態です． 
SaveChanges() を呼び出すと，UPDATE 文がDBに対して発行されます．
SaveChanges() を呼び出した後は Unchanged 状態になります．


4.2. データの挿入
データの挿入は単純で，Add関数を使うことで実現できます．

using (var context = new ShoppingContext())
{
    context.Products.Add(newProduct
    {
        Name = "Test",
        Price = 1000,
    });

    context.SaveChanges();
}

dbcontext_and_entity_state で説明したように，
Add() を呼び出した段階では，DBに対してINSERT 文が 発行されないことに注意してください．
SaveChanges() を呼び出すことで，初めてDBへ情報が反映されます． 
SaveChanges() を呼び出すことを忘れないようにしてください．

上記のサンプルコードの場合，以下のようなコマンドがDBに対して発行されます．

exec sp_executesql N'
insert [dbo].[Products]([Name], [Price])
values (@0, @1)

select [ProductId]
from [dbo].[Products]
where @@ROWCOUNT > 0 and [ProductId] = scope_identity()' ,
N'@0 nvarchar(max) ,@1 int' ,
@0=N'Test' , @1 =1000

上記のようにINSERT 文が発行され，
挿入したデータの ProductId が返却されていることがわかります．

DbContext を使って 大量のデータを挿入する際には注意が必要です．
dbcontext_and_entity_state でも説明した通り，
DbContext は内部に挿入したオブジェクトの状態を蓄えています．
よって，大量のデータを DbContext を経由して挿入するとメモリ不足に陥る可能性があります．

大量のデータを挿入したい場合は，例えば1000件 挿入した後に SaveChanges() し，
Contextを破棄するなどの工夫が必要なので注意してください．


4.3. データの読み出し
データの呼び出しも単純で，DbContext の DbSet を経由してアクセスするだけです．
例えば， dbcontext_and_entity_state のサンプルコードで，
Productsテーブル内のすべてのデータの Name だけを表示したい場合は，
以下のように記述します．

using (var context = new ShoppingContext())
{
    foreach (var product in context.Products)
    {
        Console.WriteLine(product.Name);
    }
}
呼び出しの場合は，結果が必要になった段階でDBに SELECT 文が発行されます．
DBへは次のような Sql文が発行されます．

SELECT
  [Extent1].[ProductId] AS [ProductId],
  [Extent1].[Name] AS [Name],
  [Extent1].[Price] AS [Price]
FROM [dbo].[Products] AS [Extent1]

ここで気をつけなければならないことがあります．
上記のサンプルコードの場合，Name だけが欲しかったため，

SELECT [Extent1].[ProductName] AS [ProductId] 
FROM [dbo].[Products] AS [Extent1]

のようなSqlを発行してほしいものですが，

Select * FROM [dbo].[Products]

というSqlが発行されます． 
不必要なデータも一緒に取得されてしまいますので，
もし性能等を気にする場合は，独自にSQL文を記述する必要があります．


4.3.1. キャッシュされたデータにアクセスする
DbContextを使ってアクセスする場合に気をつけなければならないことがあります．
例えば，下記のようなサンプルコードを書いたとしましょう．

using (var context = new ShoppingContext())
{
    foreach (var product in context.Products)
    {
        Console.WriteLine(product.Name);
    }

    foreach (var product in context.Products)
    {
        Console.WriteLine(product.Name);
    }
}

上記の例だと２回 product.Name にアクセスしていますが，
データはContextにキャッシュされたものを使わず，
2回DBに対して SELECT 文が 発行されてしまいます．

こういった事態をさける為には，以下の2通りの方法が考えられます．

・ToArray() を使ってはじめに結果を確定させ，そのデータに対してアクセスする
・Load関数を使って DbContext 内にデータをキャッシュさせる

一つ目の方法として，あらかじめToArray() などをして
結果を確定させてしまう方法があります．

var products = context.Products.ToArray();

このproductsに対してアクセスすれば，DBへ Sqlが発行されることはありません．
結果を確定させてしまうために ToArray() を行うのは，
LINQでよく使われるテクニックですね．

二つ目の方法として，Load関数を呼び出して，
一度 DbContext 内部にキャッシュを作る方法もあります．
例えば，以下のように記述します．

using System;
using System.Data.Entity;

namespace EntityFrameworkSample
{
    public class Program
    {
        static void Main(string[] args)
        {
            using (var context = newShoppingContext())
            {
                // この時点で，DBに対して SELECT * FROM Productsを発行する
                context.Products.Load();

                // context.Products.Localを使う事で，ローカルにキャッシュされたデータを使う
                foreach (var product in context.Products.Local)
                {
                    Console.WriteLine(product.Name);
                }
            }//using
        }//Main()
    }//class
}
Load関数を呼び出すことで，一度 DbContext 内部にデータをキャッシュします．
その後，context.Products.Local と言った感じで，
Localというプロパティを使う事で キャッシュされたデータにアクセスする事が可能です．


4.3.2. LINQによるデータアクセス
EFでは，データへのアクセスにはLINQを使えます．
例えば，NameがTestというデータにアクセスしたい場合，

var products = context.Products
  .Where(x => x.Name == "Test")
  .ToArray();

と記述することで，DBに対して

SELECT * FROM [Products] WHERE Name = N'Test';

といったSqlが発行されます． 
LINQは遅延評価なため，
結果が必要になるまではSql文が発行されないことに注意してください．
結果をあらかじめ確定させたい場合は，ToArray()やLoad()を使いましょう．

上記の場合は，ToArray() を呼び出して結果を確定させてしまっているため，
即座にSql文が発行されます．

その他，名前順にデータをソートしたい場合は，

var products = context.Products
  .OrderBy(x => x.Name)
  .ToArray();

と記述することで，DBに対して

SELECT * FROM [Products] ORDER BY [Name];

のようなSql文が発行されます．

残念ながら，EF4.3 の段階では次のような事は記述は行うことができません．

context.Products
  .Where(x => x.Name == GetXXValue() );

GetXXValue() は関数ですが，Where等で指定できる値は，
あらかじめ定まった値でなければなりませんので注意してください．


4.3.3. LINQ To Entities と LINQ To Object
LINQは便利な機能です．やりたいことを命令的に記述でき，
Objectに対してもDBに対しても同じように書くことができます．
しかし，LINQは使い方を誤ると思わぬ落とし穴に はまることもあります．

LINQ To Entities と LINQ To Object の違いを 
ちゃんと意識して記述を行う必要があります． 例えば，

context.Products.Where(x => x.Name == "Test").ToArray();

var products = context.Products.ToArray();
products.Where(x => x.Name == "Test");

は，前者はLINQ To Entitiesですが，後者はLINQ To Objectです．
LINQ To Entities の場合，DBに対して Where句を発行し，その結果を取得しています．
LINQ To Object の場合は，DBには Select * を発行して 全ての値を貰ってきています．
その後，データを Whereでフィルターしています．
これら二つは，結果こそ同じですが，パフォーマンスの観点からみると全くの別物です．

LINQ To Object と LINQ To Entities の違いに はまることもあります．
例えば，C# 側のソート条件が DBとのソート条件と違う場合があります．

context.Products.OrberBy(x => x.Name).ToArray();
と

context.Products.ToArray().OrderBy(x => x.Name);
とでは結果が違うことがあります．

上記の場合は，DB側でNameのソートを行い，その結果を返します．
下記の場合は，C#側でNameのソートを行っています．
ソートの順番が変わってしまうので，注意しましょう．

また，DBでは大文字小文字の区別がありません，
Where 句でアクセスした場合も Linq To Entities と Linq To Object とで結果が違うことがあり，
思わぬ落とし穴にはまる可能性もあるので注意しましょう．

Load関数で呼び出し，Localプロパティに対してLINQを使った場合も
Linq To Object になるので注意しましょう．

context.Products.Load()
context.Products.Local.OrderBy(x => x.Name);

と記述した場合は，C#側でのソートとなります．


4.3.4. 大量データ読み出し時の注意
DbContextは内部に取得したオブジェクトの状態を蓄えていると，
dbcontext_and_entity_state にて説明しました．
データを読み出した際は，そのEntityを Unchanged 状態でContext内に保存しておきます．
よって，大量のデータを DbContext を経由して読み出すと，
メモリ不足に陥る可能性があります．

こういった事態をさける為の方法として，
AsNoTracking() という関数が存在します． 例えば，次のようにして利用します．

using (var context = new ShoppingContext())
{
    var products = context.Products
        .AsNoTracking()
        .ToArray();

    // productsにアクセス
}
AsNoTracking() をつける事によって，
読み出されたデータをDbContext内でトラッキングしません．
ただし，トラッキングされてないということは，
読み出した products に対して いかなる変更も加えられないということです．
データを読み取り専用で利用したい場合には，
AsNoTracking()をつける事によってパフォーマンスが向上する可能性があります．


4.3.5. Findを使ったデータの検索
1件だけのデータを取得したい場合，LINQでは Single() を使います．
EFの場合も，Singleを使ってデータにアクセスします．

context.Products.Single(x => x.name == "Test");

DBには，Select Top 2 * From Products といったようなSQLが発行されます．
2件データを取ってきて，結果が 2件，または 0件の場合はエラーを返します．
結果が 1件の場合は，そのデータを返します．

１件または0件のデータを取得したい場合，LINQでは SingleOrDefault() を使いますが，
EFではより効率の良い関数，Find() が存在します． 例えば，次のようにして利用します．

context.Products.Find(x => x.name == "Test");

SingleOrDefault() と動作は同じですが，効率が違います．
Find() の場合は，
あらかじめ DbContext 内部にキャッシュされているEntityが有ればそれを返します．
もしキャッシュがなければ DB へ Sql を発行し，結果を返します． 
つまり，DBへの不要なアクセスを押さえることができます．


4.4. データの更新
データの更新はとても簡単です．一度読み込んだデータを編集し，
SaveChanges() を行うだけです．

using (var context = new ShoppingContext())
{
     var product = context.Products.Single(x => x.Name == "Test");
     product.Name = "Aiueo";

     context.SaveChanges();
}
SaveChanges() を行うと，Update 文が発行されます．


4.5. データの削除
データを削除するには,Remove() を使います．

using (var context = new ShoppingContext())
{
    var product = context.Products.Single(x => x.Name == "Test");
    context.Products.Remove(product);

    context.SaveChanges();
}

ProductIdが1の場合，次のようなSql文が発行されます．

SELECT TOP (2)
  [Extent1].[ProductId] AS [ProductId],
  [Extent1].[Name] AS [Name],
  [Extent1].[Price] AS [Price]
FROM [dbo].[Products] AS [Extent1]
WHERE N'Test' = [Extent1].[Name]

exec sp_executesql N'
delete [dbo].[Products]
  where ([ProductId] = @0)',
N'@0 int', @0=1

DELETE を発行するためには，
一度 DbContext 内部にオブジェクトをトラッキングさせて
(上記の場合はSingleでデータを取ってきて)， 
Remove関数を使ってオブジェクトを Deleted 状態に変化させます．
その後，SaveChanges() を呼び出す事によって DELETE文が発行されます．

削除したいデータのID(例の場合はProductId)があらかじめ分かっている場合，
わざわざDBからデータを Select してきてから Delete を発行するのは，
やや無駄な処理のように思えます．

あらかじめIDが分かっているのなら，
Attach関数とRemove関数を組み合わせることによって，
いちいちデータを Select しなくても DELETE 文を発行することができます．
Attach関数を使う事によって，
指定したエンティティが既にDBに存在しているかのように振る舞わせることができます．
例えば，ProductId が 1 のデータを削除したい場合は，次のように記述できます．

using (var context = new ShoppingContext())
{
     var toRemoveProduct = new Product { ProductId = 1 };
     context.Products.Attach(toRemoveProduct);
     context.Products.Remove(toRemoveProduct);

     context.SaveChanges();
}

Attach関数を呼び出す事で，
DbContext に ProductId = 1 のオブジェクトが既に存在するかのように 
振る舞わせることができます．

ここで，Remove関数を使い，オブジェクトを Deleted 状態に変化させ
SaveChanges() を呼び出すことで， Delete文が発行されます．
Delete に必要なのは ProductId だけなので，
Productの他のプロパティ（例えばName等）は設定する必要はありません．

Attach関数は，既に呼び出されているエンティティに対して使っては行けません．
すでに存在しているオブジェクトを Attach() しようとすると，
InvalidOperationExceptionが発生します．


4.6. SaveChanges() の動作
SaveChangesは，DbContext 内でトラッキングされているオブジェクトのうち，
Unchanged または Detached 状態以外のものを発見すると，
それらの情報を反映させる Sql 文を DB に対して発行します．

SaveChanges() はトランザクショナルな関数です．
例えばデータの更新と削除を DbContext に対して行い，
SaveChanges() を呼び出すとします． 
SaveChanges() を呼び出した段階で，DBに対してUpdate文とDelete文が発行されます．
ここで，Updateには成功して，Deleteには失敗した場合，
Updateしたデータは自動的に ロールバックされます．

 
COPYRIGHT (C) 2011- DENSAN-LABS.NET. ALL RIGHTS RESERVED.
DESIGN BY FREE CSS TEMPLATES. CREATED USING SPHINX
