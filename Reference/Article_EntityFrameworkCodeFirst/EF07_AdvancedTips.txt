■ densanlabs
7. 高度な話題
https://densan-labs.net/tech/codefirst/advance.html

Table Of Contents
7. 高度な話題
7.1. Entity Framework Power Toolsを用いたER図の確認
7.1.1. Entity Framework Power Toolsのインストール
7.1.2. Power Toolsが生成したER図の確認
7.2. AsNoTrackingによる高速化
7.3. 大規模データ取扱い時に気を付けること
7.4. ストアドプロシージャ
7.5. Proxyオブジェクト


7.1. Entity Framework Power Tools を用いた ER図の確認
Code Firstは，プログラムを実行した段階で，
初めて どのようなテーブルが作成されているのかを知ることができます．
しかし，場合によってはプログラムを実行する前に，
どのようなテーブルが生成されるのかを知りたい場合があります．
そんなときに役立つツールが，Entity Framework Power Toolsです．
このツールは，作成した Context クラスを元に，ER図を自動生成してくれます．


7.1.1. Entity Framework Power Tools のインストール
Entity Framework Power Toolsは，
拡張機能マネージャから簡単にインストールすることができます．
メニューバーの[ツール]，[拡張機能マネージャー]をクリックし，
オンライン上から[Entity Framework Power Tools]を検索し，
インストールを行いましょう(図 entity_pic064)．

../../_images/entity_pic064.JPG
図:Entity Framework Power Toolsのインストール


7.1.2. Power Toolsが生成した ER図の確認
Entity Framework Power Toolsをインストール後は，
Code Firstが作成するテーブルを ER図で表示させることができます．

ソリューションエクスプローラから，
DbContextが継承されているクラスにカーソルを合わせ，右クリックをします．
その後，Entity Framework，
View Entity Data Model(Read-Only)をクリックすることで，
ER図を確認することができます(図 entity_pic075).

../../_images/entity_pic075.JPG
図: ER図の生成方法

生成されたテーブルを ER図で表すと図 entity_pic063 のようになります．

../../_images/entity_pic063.JPG
図: Productsテーブルと ProductCategories テーブルの ER図


7.2. AsNoTracking() による高速化
TODO: データ読み出すだけなら AsNoTracking()をつけると1.2倍くらい高速化することを書く
=>〔4.3.4. 大量データ読み出し時の注意〕

7.3. 大規模データ取扱い時に気を付けること
TODO: DbContextは内部で状態を持っている為、
大量のデータをAdd(), Selectするとメモリ不足に陥ることを書く
=>〔4.3.4. 大量データ読み出し時の注意〕

7.4. ストアドプロシージャ
TODO: Code Firstだとストアド使えないので、
MigrationでストアドをDBにいれて、それを直接呼び出すしかない。
その方法をここに書く
=>〔EF03_Migration.txt〕

7.5. Proxyオブジェクト
TODO: POCO Proxyの作成要件について
      クラスのプロパティを public, virtual, not-sealedにするなど
TODO: 遅延読み込みプロキシと変更追跡プロキシの詳細を書く
=>〔5.3.3. Lazy Loading (遅延読み出し)〕
 
COPYRIGHT (C) 2011- DENSAN-LABS.NET. ALL RIGHTS RESERVED.
DESIGN BY FREE CSS TEMPLATES. CREATED USING SPHINX
